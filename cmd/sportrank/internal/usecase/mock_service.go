// Code generated by mockery v2.13.1. DO NOT EDIT.

package usecase

import (
	league "github.com/liampulles/ranking-cli/pkg/league"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CalculateRankings provides a mock function with given fields: gameResults
func (_m *MockService) CalculateRankings(gameResults []league.GameResult) []league.Ranking {
	ret := _m.Called(gameResults)

	var r0 []league.Ranking
	if rf, ok := ret.Get(0).(func([]league.GameResult) []league.Ranking); ok {
		r0 = rf(gameResults)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]league.Ranking)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
